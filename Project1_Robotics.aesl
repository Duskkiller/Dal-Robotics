<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="0" name="STOPPED"/>
<constant value="1" name="FORWARD"/>
<constant value="-1" name="LEFT"/>
<constant value="1" name="RIGHT"/>
<constant value="4" name="LEFT1"/>
<constant value="5" name="RIGHT1"/>
<constant value="6" name="LOST"/>
<constant value="7" name="LOSTCHECK"/>
<constant value="8" name="FORWARD1"/>
<constant value="450" name="TARGET"/>
<constant value="750" name="TABLE"/>
<constant value="250" name="THRESHOLD"/>
<constant value="2500" name="TURNINGP"/>
<constant value="400" name="TURN_PERIOD"/>
<constant value="450" name="TARGET1"/>
<constant value="200" name="TARGET2"/>
<constant value="250" name="TURNTARGET"/>
<constant value="69" name="AVOID"/>
<constant value="9" name="NORMAL"/>
<constant value="6969" name="CURVE"/>
<constant value="6968" name="TEMPFORWARD"/>
<constant value="505" name="SOS"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">var state = STOPPED
var checking = 0
var direction
var SOSused
motor.left.target = 0
motor.right.target = 0

sub forward
	motor.left.target = TARGET
	motor.right.target = TARGET
	call leds.top(0,255,0)#green
sub stopped
	motor.left.target = 0
	motor.right.target = 0
	call leds.top(0,0,0)#no colour
sub right #soft right
	motor.left.target = TARGET
	motor.right.target = TARGET-200
	call leds.top(255, 179, 76)#orange
sub left #soft left
	motor.left.target = TARGET-200
	motor.right.target = TARGET
	call leds.top(0,0,255)#blue
sub hard
	motor.left.target = TARGET * direction
	motor.right.target = -TARGET * direction
	call leds.top(255, 255, 76)#yellow

sub curveLeft
	motor.left.target = TARGET
	motor.right.target = TARGET2
sub curveRight
	motor.left.target = TARGET2
	motor.right.target = TARGET
sub lost
	call leds.top(255,0,0) #red
	if  state != AVOID or state != CURVE then
		if direction == LEFT then
			motor.left.target=TARGET-400
			motor.right.target=TARGET
		end
		if direction == RIGHT then
			motor.left.target=TARGET	
			motor.right.target=TARGET-400
		end
		
	end

################END OF STATES######################################
onevent button.forward
	state = NORMAL
	direction = LEFT
	callsub left
onevent button.backward
	state = STOPPED
	callsub stopped

onevent prox 
	if  state !=STOPPED then
		if  (state == NORMAL) then
			if  (prox.ground.delta[1] &lt; THRESHOLD) and (direction != RIGHT) then
				direction = RIGHT
				callsub right
			end
			if  (prox.ground.delta[0] &lt; THRESHOLD) and (direction != LEFT) then
				direction = LEFT
				callsub left
			end
			if (prox.ground.delta[0] > TABLE and prox.ground.delta[1] > TABLE)  then
				timer.period[1] = 300
				checking = 1
			end
		end
		if  state == LOST and (prox.ground.delta[1] &lt; THRESHOLD or prox.ground.delta[0] &lt; THRESHOLD) then
			checking = 0
			timer.period[1] = 500
			if  direction == LEFT then
				direction = RIGHT
				state = NORMAL
			elseif  direction == RIGHT then
				direction = LEFT
				state = NORMAL
			end
		end
	
	##################
		if  state != CURVE and state != AVOID and state != TEMPFORWARD then
			if prox.horizontal[2] > TURNINGP-1500 then
				state = AVOID
				timer.period[0]=TURN_PERIOD
				callsub hard
				
			elseif prox.horizontal[1] > TURNINGP or prox.horizontal[3] > TURNINGP then
				state = AVOID
				timer.period[0] = TURN_PERIOD-50
				callsub hard
				
			elseif prox.horizontal[0] > TURNINGP-1500 or prox.horizontal[4] > TURNINGP-1500 then
				state = AVOID
				timer.period[0] = TURN_PERIOD-100
				callsub hard
			end
		end
	end
	
	if state == CURVE then
		if  prox.ground.delta[0] &lt; THRESHOLD or prox.ground.delta[1] &lt; THRESHOLD then
			if  SOSused == 0 then
				#this will ensure that its going the right way
				if  direction == LEFT then
					direction = RIGHT 
				elseif direction == RIGHT then
					direction = LEFT
				end
			end
			SOSused = 0
			state = NORMAL #revert back to line searching
		end
		
		#SOS FUNCTION (too clsoe to wall so turn towards the line)
		if  prox.horizontal[0] > 1 or prox.horizontal[4] > 1 then #note: this may need to be tinkered with for real life
			if  SOSused != 1 then
				SOSused = 1
				callsub forward
			end
		end
		#END SOS FUNCTION
	end
	
	######################
onevent timer0 #used for 90
	if  state == AVOID then #so it doesn't trigger off the line. This might cause problems when it comes to corner blocks
		motor.left.target = TARGET
		motor.right.target = TARGET
		timer.period[0] = 600
		state = TEMPFORWARD
	elseif  state == TEMPFORWARD then
		if  direction == LEFT then
			state = CURVE
			callsub curveLeft
		elseif  direction == RIGHT then
			state = CURVE
			callsub curveRight
		end
	end

onevent timer1
	if checking == 1 then
		state = LOST
		callsub lost
	end</node>


</network>
