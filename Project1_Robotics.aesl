<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="0" name="STOPPED"/>
<constant value="1" name="FORWARD"/>
<constant value="-1" name="LEFT"/>
<constant value="1" name="RIGHT"/>
<constant value="4" name="LEFT1"/>
<constant value="5" name="RIGHT1"/>
<constant value="6" name="LOST"/>
<constant value="7" name="LOSTCHECK"/>
<constant value="8" name="FORWARD1"/>
<constant value="450" name="TARGET"/>
<constant value="750" name="TABLE"/>
<constant value="250" name="THRESHOLD"/>
<constant value="2500" name="TURNINGP"/>
<constant value="400" name="TURN_PERIOD"/>
<constant value="450" name="TARGET1"/>
<constant value="200" name="TARGET2"/>
<constant value="250" name="TURNTARGET"/>
<constant value="69" name="AVOID"/>
<constant value="9" name="NORMAL"/>
<constant value="6969" name="CURVE"/>
<constant value="6968" name="TEMPFORWARD"/>
<constant value="505" name="SOS"/>
<constant value="420" name="FIX"/>
<constant value="605" name="CATCH"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">var state = STOPPED
var checking = 0
var direction
var SOSused
var revert = 0
var tempTimer = 0
motor.left.target = 0
motor.right.target = 0

sub forward
	motor.left.target = 350
	motor.right.target = 350
	call leds.top(0,255,0)#green
sub stopped
	motor.left.target = 0
	motor.right.target = 0
	SOSused = 0
	revert = 0
	call leds.top(0,0,0)#no colour
sub right #soft right
	motor.left.target = TARGET - 200
	motor.right.target = TARGET - 300
	call leds.top(255, 179, 76)#orange
sub left #soft left
	motor.left.target = TARGET - 300
	motor.right.target = TARGET - 200
	call leds.top(232,12,229)#purple
sub hard
	motor.left.target = TARGET * direction
	motor.right.target = -TARGET * direction
	call leds.top(255, 255, 76)#yellow

sub curveLeft
	motor.left.target = TARGET
	motor.right.target = TARGET2
sub curveRight
	motor.left.target = TARGET2
	motor.right.target = TARGET
sub lost
	call leds.top(255,0,0) #red
	if direction == LEFT then	
		motor.left.target=TARGET - 300
		motor.right.target=TARGET 
	elseif direction == RIGHT then
		motor.left.target=TARGET 
		motor.right.target=TARGET - 300
	end	


################END OF STATES######################################
onevent button.forward
	state = NORMAL
	direction = LEFT
	callsub left
onevent button.backward
	state = STOPPED
	callsub stopped

onevent prox 
	if  state !=STOPPED then
		if  (state == NORMAL and revert != 1) then
			if  (prox.ground.delta[1] > TABLE) then
				checking = 0
				SOSused = 0
				revert = 0
				direction = LEFT
				callsub left
				
			elseif  (prox.ground.delta[0] > TABLE) then
				checking = 0
				SOSused = 0
				revert = 0
				direction = RIGHT
				callsub right
			elseif (prox.ground.delta[0] > TABLE and prox.ground.delta[1] > TABLE) then
				timer.period[0] = 700
				checking = 1
			end
		end
	
	##################
		if  state != CURVE and state != AVOID and state != TEMPFORWARD and state != FORWARD1 then
			if prox.horizontal[2] > TURNINGP - 1500 then
				direction = LEFT
				state = AVOID
				timer.period[0]=TURN_PERIOD
				callsub hard
				
			elseif prox.horizontal[4] > TURNINGP-1500 or prox.horizontal[3] > TURNINGP - 1500 then
				state = AVOID
				direction = LEFT
				timer.period[0] = TURN_PERIOD
				callsub hard
			elseif  prox.horizontal[1] > TURNINGP - 1500 or prox.horizontal[0] > TURNINGP-1500 then
				state = AVOID
				direction = LEFT
				timer.period[0] = TURN_PERIOD
				callsub hard
			end
		end
	end
	
	if (prox.ground.delta[1] &lt; THRESHOLD or prox.ground.delta[0] &lt; THRESHOLD)then
		if  state == FORWARD1 or state == CURVE or state == LOST then
			if  state == FORWARD1 and (prox.ground.delta[1] &lt; THRESHOLD or prox.ground.delta[0] &lt; THRESHOLD) then
				timer.period[0] = 100
				tempTimer = 1
			else
				tempTimer = 0
			end
			
			if  tempTimer != 1 then
				revert = 1
				checking = 0
				call leds.top(13,255,149)#light blue
				#this will ensure that its going the right way
				if  state == LOST then
					timer.period[0] = 500
				else
					timer.period[0] = 1000
				end
				if  state == LOST then
					if  direction == LEFT then
						direction = RIGHT
					elseif  direction == RIGHT then
						direction = LEFT
					end
				end
				state = FIX
				if direction == LEFT then
					callsub left
				elseif direction == RIGHT then
					callsub right
			end
			

			state = NORMAL
			end
		end
	end
		
		
	
	
	if  state == CURVE then
		#SOS FUNCTION (too clsoe to wall so straight towards the line)
		if  prox.horizontal[0] > 1 or prox.horizontal[4] > 1 then 
			if  SOSused != 1 then
				SOSused = 1
				callsub forward
				state = FORWARD1
			end
		end
		#END SOS FUNCTION
	end
		
	
	
	######################
onevent timer0 #used for 90
	if  state == AVOID then #so it doesn't trigger off the line. This might cause problems when it comes to corner blocks
		motor.left.target = TARGET
		motor.right.target = TARGET
		timer.period[0] = 600
		state = TEMPFORWARD
	elseif  state == TEMPFORWARD then
		revert = 0
		if  direction == LEFT then
			callsub curveLeft
			state = CURVE
		elseif  direction == RIGHT then
			state = CURVE
			callsub curveRight
		end
	elseif  tempTimer == 1 then
		tempTimer = 0
		if  direction == LEFT then
			direction = RIGHT
			callsub right
		elseif direction == RIGHT then
			direction = LEFT
			callsub left
		end
	elseif  revert == 1 then
		revert = 0
	elseif checking == 1 and state == NORMAL then #grace period over for turns
		state = LOST
		callsub lost
	end
	
</node>


</network>
