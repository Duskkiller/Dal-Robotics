<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="0" name="STOPPED"/>
<constant value="1" name="FORWARD"/>
<constant value="-1" name="LEFT"/>
<constant value="1" name="RIGHT"/>
<constant value="4" name="LEFT1"/>
<constant value="5" name="RIGHT1"/>
<constant value="6" name="LOST"/>
<constant value="7" name="LOST1"/>
<constant value="8" name="FORWARD1"/>
<constant value="450" name="TARGET"/>
<constant value="750" name="TABLE"/>
<constant value="250" name="THRESHOLD"/>
<constant value="2500" name="TURNINGP"/>
<constant value="400" name="TURN_PERIOD"/>
<constant value="450" name="TARGET1"/>
<constant value="200" name="TARGET2"/>
<constant value="250" name="TURNTARGET"/>
<constant value="69" name="AVOID"/>
<constant value="9" name="NORMAL"/>
<constant value="6969" name="CURVE"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">var state = STOPPED
var direction
var prevdir
motor.left.target = 0
motor.right.target = 0
timer.period[0] = 0

sub forward
	motor.left.target = TARGET
	motor.right.target = TARGET
	call leds.top(0,255,0)#green
sub stopped
	motor.left.target = 0
	motor.right.target = 0
	call leds.top(0,0,0)#no colour
sub right #soft right
	motor.left.target = TARGET
	motor.right.target = TARGET-200
	call leds.top(255, 179, 76)#orange
sub left #soft left
	motor.left.target = TARGET-200
	motor.right.target = TARGET
	call leds.top(0,0,255)#blue
sub hard
	motor.left.target = TARGET * direction
	motor.right.target = -TARGET * direction
	call leds.top(255, 255, 76)#yellow

sub curveLeft
	motor.left.target = TARGET
	motor.right.target = TARGET2
sub lost
	if  state != AVOID or state != CURVE then
		if direction == LEFT then
			motor.left.target=TARGET-400
			motor.right.target=TARGET
		end
		if direction == RIGHT then
			motor.left.target=TARGET	
			motor.right.target=TARGET-400
		end
		
	end

################END OF STATES######################################
onevent button.forward
	state = NORMAL
	callsub forward
onevent button.backward
	state = STOPPED
	callsub stopped

onevent prox 
	if  state !=STOPPED then
		if  (state == NORMAL) then
			if  (prox.ground.delta[1] &lt; THRESHOLD) and (direction != RIGHT) then
				direction = RIGHT
				callsub right
			end
			if  (prox.ground.delta[0] &lt; THRESHOLD) and (direction != LEFT) then
				direction = LEFT
				callsub left
			end
			if (prox.ground.delta[0] > TABLE and prox.ground.delta[1] > TABLE)  then
				callsub lost
			end
		end
	
	##################
		if prox.horizontal[2]>TURNINGP-1500 then
			state = AVOID
			callsub hard
			if  prox.ground.delta[0] > THRESHOLD+50 and prox.ground.delta[1] > THRESHOLD+100 then
				timer.period[0]=TURN_PERIOD
			end
		elseif prox.horizontal[1]>TURNINGP then
			state = AVOID
			callsub hard
			if prox.ground.delta[0] > THRESHOLD+100 and prox.ground.delta[1] > THRESHOLD +100 then
				timer.period[0] = TURN_PERIOD-50
			end
		elseif prox.horizontal[3]>TURNINGP then
			state = AVOID
			callsub hard
			if  prox.ground.delta[0]>THRESHOLD+100 and prox.ground.delta[1]>THRESHOLD+100 then
				timer.period[0] = TURN_PERIOD+150	
			end
		elseif prox.horizontal[0]>TURNINGP-1500 then
			state = AVOID
			callsub hard
			if  prox.ground.delta[0]> THRESHOLD+100 and prox.ground.delta[1]>THRESHOLD+100 	then
				timer.period[0] = TURN_PERIOD-100
			end
		elseif prox.horizontal[4] > TURNINGP-1500 then
			state = AVOID
			callsub hard
		end
	end
	######################
onevent timer0 #used for 90
	if  direction == AVOID then
		direction = CURVE
		callsub curveLeft
	end</node>


</network>
